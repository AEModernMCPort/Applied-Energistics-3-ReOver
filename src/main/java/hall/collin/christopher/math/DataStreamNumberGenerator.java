/*
 * The MIT License
 *
 * Copyright 2016 cyanobacterium.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package hall.collin.christopher.math;

import java.io.IOException;

/**
 * Generates numbers by reating bytes from a stream (useful if using a 
 * hardware random number generator for truly random numbers).
 * @author CCHall
 */
public class DataStreamNumberGenerator extends AbstractNumberGenerator{
	private final java.io.DataInputStream dataStream;
	
	/**
	 * Constructs a new number generator wrapped around the provided 
	 * data stream.
	 * @param dataStream A data input stream that is ready to read.
	 */
	public DataStreamNumberGenerator(java.io.DataInputStream dataStream){
		this.dataStream = dataStream;
	}
	
	/**
	 * Generates a long integer whose range is unbound. 
	 * @return An integer
	 */
	@Override
	public long nextLong(){
		try {
			return dataStream.readLong();
		} catch (IOException ex) {
			throw new RuntimeException("Unchecked "+ex.getClass().getSimpleName(),ex);
		}
	}
	/**
	 * Generates a integer whose range is unbound. 
	 * @return An integer
	 */
	@Override
	public int nextInt(){
		try {
			return dataStream.readInt();
		} catch (IOException ex) {
			throw new RuntimeException("Unchecked "+ex.getClass().getSimpleName(),ex);
		}
	}
	/**
	 * Generates a short integer whose range is unbound. 
	 * @return An integer
	 */
	public short nextShort(){
		try {
			return dataStream.readShort();
		} catch (IOException ex) {
			throw new RuntimeException("Unchecked "+ex.getClass().getSimpleName(),ex);
		}
	}
	/**
	 * Generates a short integer whose range is unbound. 
	 * @return An integer
	 */
	public byte nextByte(){
		try {
			return dataStream.readByte();
		} catch (IOException ex) {
			throw new RuntimeException("Unchecked "+ex.getClass().getSimpleName(),ex);
		}
	}
	
	/**
	 * Generates a long integer whose range is unbound. 
	 * @return An integer
	 */
	@Override
	public boolean nextBoolean(){
		try {
			return (dataStream.readByte() & 1) != 0;
		} catch (IOException ex) {
			throw new RuntimeException("Unchecked "+ex.getClass().getSimpleName(),ex);
		}
	}

	/**
	 * Fills the given array with generated byte values.
	 * @param byteBuffer A byte array to be filled.
	 */
	@Override
	public void nextBytes(byte[] byteBuffer) {
		try {
			dataStream.readFully(byteBuffer);
		} catch (IOException ex) {
			throw new RuntimeException("Unchecked "+ex.getClass().getSimpleName(),ex);
		}
	}
	
}
