/*
 * The MIT License
 *
 * Copyright 2016 Christopher Collin Hall 
 * <a href="mailto:explosivegnome@yahoo.com">explosivegnome@yahoo.com</a>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package hall.collin.christopher.math.random;

import hall.collin.christopher.math.AbstractNumberGenerator;
import java.util.Random;

/**
 * This class is a simple implementation of AbstractNumberGenerator using 
 * <code>java.util.Random</code> as the number generator.
 * @author Christopher Collin Hall
 */
public class DefaultRandomNumberGenerator extends AbstractNumberGenerator {
	final Random prng;
	/**
	 * Instantiates with the given seed for the underlying number generator 
	 * (java.util.Random)
	 * @param seed A number to seed the generator 
	 */
	public DefaultRandomNumberGenerator(long seed){
		prng = new Random(seed);
	}
	/**
	 * Instantiates with the default seed for the underlying number generator 
	 * (java.util.Random)
	 */
	public DefaultRandomNumberGenerator(){
		prng = new Random();
	}
	/**
	 * Generates a number between 0 and 1. 
	 * If not overridden by the extending class, the default implementation is 
	 * as follows:<br/><code>
	 * return (double)(nextLong() & 0x000fffffffffffffL)/((double)0x000fffffffffffffL);
	 * </code>
	 * @return A number between 0 and 1.
	 */
	@Override
	public double nextDouble(){
		return prng.nextDouble();
	}
	/**
	 * Generates a number between 0 and 1. 
	 * If not overridden by the extending class, the default implementation is 
	 * as follows:<br/><code>
	 * return (float)(nextInt() & 0x007fffff)/((float) 0x007fffff);
	 * </code>
	 * @return A number between 0 and 1.
	 */
	@Override
	public float nextFloat(){
		return prng.nextFloat();
	}
	/**
	 * Generates an integer whose range is unbound.
	 * If not overridden by the extending class, the default implementation is 
	 * as follows:<br/><code>
	 * return (int)nextLong();
	 * </code>
	 * @return An integer
	 */
	@Override
	public int nextInt(){
		return prng.nextInt();
	}
	/**
	 * Generates a long integer whose range is unbound. This method must be 
	 * overridden by the extending class.
	 * @return An integer
	 */
	@Override
	public long nextLong(){
		return prng.nextInt();
	}
	/**
	 * Returns true or false.
	 * If not overridden by the extending class, the default implementation is 
	 * as follows:<br/><code>
	 * return (nextInt() & 0x10) == 0;
	 * </code>
	 * @return true or false
	 */
	@Override
	public boolean nextBoolean(){
		return prng.nextBoolean();
	}
	/**
	 * Fills the given array with generated byte values.
	 * @param byteBuffer A byte array to be filled.
	 */
	@Override
	public void nextBytes(byte[] byteBuffer){
		prng.nextBytes(byteBuffer);
	}
	/**
	 * Generates a number between <code>min</code> and <code>max</code>.
	 * @param min minimum value that can be generated
	 * @param max maximum value that can be generated
	 * @return A number between <code>min</code> and <code>max</code>
	 */
	@Override
	public double nextDouble(double min, double max){
		return (max-min)*nextDouble()+min;
	}
	/**
	 * Generates a number between <code>min</code> and <code>max</code>.
	 * @param min minimum value that can be generated
	 * @param max maximum value that can be generated
	 * @return A number between <code>min</code> and <code>max</code>
	 */
	@Override
	public float nextFloat(float min, float max){
		return (max-min)*nextFloat()+min;
	}
	/**
	 * Generates a number between <code>0</code> (inclusive) and 
	 * <code>limit</code> (exclusive).
	 * @param limit Upper limit on generated integer
	 * @return A number between <code>0</code> (inclusive) and 
	 * <code>limit</code> (exclusive).
	 */
	@Override
	public int nextInt(int limit){
		return prng.nextInt(limit);
	}
}
